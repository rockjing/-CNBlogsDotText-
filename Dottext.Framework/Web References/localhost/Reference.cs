//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Dottext.Framework.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SBS (Simple Blog Service)Soap", Namespace="http://www.aspnetweblog.com/services/simpleblogservice/")]
    public partial class SBSSimpleBlogService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertCategoryPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCategoryPost1OperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPost1OperationCompleted;
        
        private System.Threading.SendOrPostCallback EditOperationCompleted;
        
        private System.Threading.SendOrPostCallback Edit1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoriesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SBSSimpleBlogService() {
            this.Url = "http://localhost/Services/SimpleBlogService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertCategoryPostCompletedEventHandler InsertCategoryPostCompleted;
        
        /// <remarks/>
        public event InsertCategoryPost1CompletedEventHandler InsertCategoryPost1Completed;
        
        /// <remarks/>
        public event InsertPostCompletedEventHandler InsertPostCompleted;
        
        /// <remarks/>
        public event InsertPost1CompletedEventHandler InsertPost1Completed;
        
        /// <remarks/>
        public event EditCompletedEventHandler EditCompleted;
        
        /// <remarks/>
        public event Edit1CompletedEventHandler Edit1Completed;
        
        /// <remarks/>
        public event GetCategoriesCompletedEventHandler GetCategoriesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/InsertCategoryPost", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertCategoryPost(string username, string password, System.DateTime postdate, string title, string body, string[] categories) {
            object[] results = this.Invoke("InsertCategoryPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        categories});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertCategoryPost(string username, string password, System.DateTime postdate, string title, string body, string[] categories, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertCategoryPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        categories}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInsertCategoryPost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCategoryPostAsync(string username, string password, System.DateTime postdate, string title, string body, string[] categories) {
            this.InsertCategoryPostAsync(username, password, postdate, title, body, categories, null);
        }
        
        /// <remarks/>
        public void InsertCategoryPostAsync(string username, string password, System.DateTime postdate, string title, string body, string[] categories, object userState) {
            if ((this.InsertCategoryPostOperationCompleted == null)) {
                this.InsertCategoryPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCategoryPostOperationCompleted);
            }
            this.InvokeAsync("InsertCategoryPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        categories}, this.InsertCategoryPostOperationCompleted, userState);
        }
        
        private void OnInsertCategoryPostOperationCompleted(object arg) {
            if ((this.InsertCategoryPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCategoryPostCompleted(this, new InsertCategoryPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="InsertCategoryPost1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/InsertCategoryPostWithUrl", RequestElementName="InsertCategoryPostWithUrl", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseElementName="InsertCategoryPostWithUrlResponse", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertCategoryPostWithUrlResult")]
        public int InsertCategoryPost(string username, string password, System.DateTime postdate, string title, string body, string url, string[] categories) {
            object[] results = this.Invoke("InsertCategoryPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url,
                        categories});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertCategoryPost1(string username, string password, System.DateTime postdate, string title, string body, string url, string[] categories, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertCategoryPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url,
                        categories}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInsertCategoryPost1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCategoryPost1Async(string username, string password, System.DateTime postdate, string title, string body, string url, string[] categories) {
            this.InsertCategoryPost1Async(username, password, postdate, title, body, url, categories, null);
        }
        
        /// <remarks/>
        public void InsertCategoryPost1Async(string username, string password, System.DateTime postdate, string title, string body, string url, string[] categories, object userState) {
            if ((this.InsertCategoryPost1OperationCompleted == null)) {
                this.InsertCategoryPost1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCategoryPost1OperationCompleted);
            }
            this.InvokeAsync("InsertCategoryPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url,
                        categories}, this.InsertCategoryPost1OperationCompleted, userState);
        }
        
        private void OnInsertCategoryPost1OperationCompleted(object arg) {
            if ((this.InsertCategoryPost1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCategoryPost1Completed(this, new InsertCategoryPost1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/SimplePost", RequestElementName="SimplePost", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseElementName="SimplePostResponse", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimplePostResult")]
        public int InsertPost(string username, string password, System.DateTime postdate, string title, string body) {
            object[] results = this.Invoke("InsertPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertPost(string username, string password, System.DateTime postdate, string title, string body, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInsertPost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPostAsync(string username, string password, System.DateTime postdate, string title, string body) {
            this.InsertPostAsync(username, password, postdate, title, body, null);
        }
        
        /// <remarks/>
        public void InsertPostAsync(string username, string password, System.DateTime postdate, string title, string body, object userState) {
            if ((this.InsertPostOperationCompleted == null)) {
                this.InsertPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPostOperationCompleted);
            }
            this.InvokeAsync("InsertPost", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body}, this.InsertPostOperationCompleted, userState);
        }
        
        private void OnInsertPostOperationCompleted(object arg) {
            if ((this.InsertPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPostCompleted(this, new InsertPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="InsertPost1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/SimplePostUrl", RequestElementName="SimplePostUrl", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseElementName="SimplePostUrlResponse", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimplePostUrlResult")]
        public int InsertPost(string username, string password, System.DateTime postdate, string title, string body, string url) {
            object[] results = this.Invoke("InsertPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertPost1(string username, string password, System.DateTime postdate, string title, string body, string url, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInsertPost1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPost1Async(string username, string password, System.DateTime postdate, string title, string body, string url) {
            this.InsertPost1Async(username, password, postdate, title, body, url, null);
        }
        
        /// <remarks/>
        public void InsertPost1Async(string username, string password, System.DateTime postdate, string title, string body, string url, object userState) {
            if ((this.InsertPost1OperationCompleted == null)) {
                this.InsertPost1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPost1OperationCompleted);
            }
            this.InvokeAsync("InsertPost1", new object[] {
                        username,
                        password,
                        postdate,
                        title,
                        body,
                        url}, this.InsertPost1OperationCompleted, userState);
        }
        
        private void OnInsertPost1OperationCompleted(object arg) {
            if ((this.InsertPost1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPost1Completed(this, new InsertPost1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/SimpleEntryUpdateUrl", RequestElementName="SimpleEntryUpdateUrl", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseElementName="SimpleEntryUpdateUrlResponse", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleEntryUpdateUrlResult")]
        public bool Edit(int entryid, string username, string password, System.DateTime postupdate, string title, string body, string url) {
            object[] results = this.Invoke("Edit", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body,
                        url});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEdit(int entryid, string username, string password, System.DateTime postupdate, string title, string body, string url, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Edit", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body,
                        url}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndEdit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EditAsync(int entryid, string username, string password, System.DateTime postupdate, string title, string body, string url) {
            this.EditAsync(entryid, username, password, postupdate, title, body, url, null);
        }
        
        /// <remarks/>
        public void EditAsync(int entryid, string username, string password, System.DateTime postupdate, string title, string body, string url, object userState) {
            if ((this.EditOperationCompleted == null)) {
                this.EditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditOperationCompleted);
            }
            this.InvokeAsync("Edit", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body,
                        url}, this.EditOperationCompleted, userState);
        }
        
        private void OnEditOperationCompleted(object arg) {
            if ((this.EditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCompleted(this, new EditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Edit1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/SimpleEntryUpdate", RequestElementName="SimpleEntryUpdate", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseElementName="SimpleEntryUpdateResponse", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleEntryUpdateResult")]
        public bool Edit(int entryid, string username, string password, System.DateTime postupdate, string title, string body) {
            object[] results = this.Invoke("Edit1", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEdit1(int entryid, string username, string password, System.DateTime postupdate, string title, string body, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Edit1", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndEdit1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Edit1Async(int entryid, string username, string password, System.DateTime postupdate, string title, string body) {
            this.Edit1Async(entryid, username, password, postupdate, title, body, null);
        }
        
        /// <remarks/>
        public void Edit1Async(int entryid, string username, string password, System.DateTime postupdate, string title, string body, object userState) {
            if ((this.Edit1OperationCompleted == null)) {
                this.Edit1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdit1OperationCompleted);
            }
            this.InvokeAsync("Edit1", new object[] {
                        entryid,
                        username,
                        password,
                        postupdate,
                        title,
                        body}, this.Edit1OperationCompleted, userState);
        }
        
        private void OnEdit1OperationCompleted(object arg) {
            if ((this.Edit1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Edit1Completed(this, new Edit1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aspnetweblog.com/services/simpleblogservice/GetCategories", RequestNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", ResponseNamespace="http://www.aspnetweblog.com/services/simpleblogservice/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCategories(string username, string password) {
            object[] results = this.Invoke("GetCategories", new object[] {
                        username,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCategories(string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCategories", new object[] {
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetCategories(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoriesAsync(string username, string password) {
            this.GetCategoriesAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetCategoriesAsync(string username, string password, object userState) {
            if ((this.GetCategoriesOperationCompleted == null)) {
                this.GetCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetCategories", new object[] {
                        username,
                        password}, this.GetCategoriesOperationCompleted, userState);
        }
        
        private void OnGetCategoriesOperationCompleted(object arg) {
            if ((this.GetCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoriesCompleted(this, new GetCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertCategoryPostCompletedEventHandler(object sender, InsertCategoryPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCategoryPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCategoryPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertCategoryPost1CompletedEventHandler(object sender, InsertCategoryPost1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCategoryPost1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCategoryPost1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertPostCompletedEventHandler(object sender, InsertPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertPost1CompletedEventHandler(object sender, InsertPost1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPost1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPost1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void EditCompletedEventHandler(object sender, EditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void Edit1CompletedEventHandler(object sender, Edit1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Edit1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Edit1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetCategoriesCompletedEventHandler(object sender, GetCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591